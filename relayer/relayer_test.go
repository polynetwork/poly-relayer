/*
 * Copyright (C) 2021 The poly network Authors
 * This file is part of The poly network library.
 *
 * The  poly network  is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The  poly network  is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License
 * along with The poly network .  If not, see <http://www.gnu.org/licenses/>.
 */

package relayer

import (
	"encoding/hex"
	"github.com/polynetwork/poly-relayer/config"
	"github.com/polynetwork/poly-relayer/msg"
	"github.com/stretchr/testify/assert"
	"os"
	"testing"

	"github.com/polynetwork/bridge-common/log"
)

func TestMain(m *testing.M) {
	log.Init(nil)
	path := "../config.json"
	env := os.Getenv("CONFIG")
	if env != "" {
		path = env
	}

	conf, err := config.New(path)
	if err != nil {
		log.Error("Failed to parse config file", "err", err)
		os.Exit(2)
	}
	err = conf.Init()
	config.CONFIG_PATH = path
}

func TestGetEpochByHeight1(t *testing.T) {
	config, err := config.New("../config.devnet.poly-starcoin.conf.json")
	if err != nil {
		log.Error("Failed to parse config file", "err", err)
	}
	err = config.Init()
	if err != nil {
		log.Error("Failed to initialize configuration", "err", err)
	}
	l, _ := PolyListener()

	epoch, err := l.SDK().Node().GetEpochInfo(0)
	if epoch == nil {
		log.Error("epoch not found in zion?", "err", err)
	}
	log.Info("zion GetCurrentEpochInfo", "epoch id", epoch.ID.Uint64(), "epoch start height", epoch.StartHeight.Uint64(), "epoch end height", epoch.EndHeight.Uint64())

	epoch_by_id, err := l.EpochById(epoch.ID.Uint64())
	if err != nil {
		log.Error("Get Epoch failed", "err", err)
	}
	log.Info("Print change epoch data: ",
		" \nepoch.Header: ", hex.EncodeToString(epoch_by_id.Header),
		"\nepoch.Seal: ", hex.EncodeToString(epoch_by_id.Seal))

}

func TestParseRawData(t *testing.T) {
	raw_data := "00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000013e0000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000003600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000205991d3d0450c3c714c254ac7176184f5a95b417fa2bceff89f53bdcd3eece5d800000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000010f8ea2d94b8a7d83ace33bb56731268e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f7a696f6e5f6c6f636b5f70726f7879000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000010f8ea2d94b8a7d83ace33bb56731268e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f7a696f6e5f6c6f636b5f70726f787900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006756e6c6f636b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007c4a0000000000000000000000000000000105546f6b656e33546f6b656e3c307830303030303030303030303030303030303030303030303030303030303030313a3a5354433a3a5354433e1029ce635e538f628632963e92ed506d25204e00000000000000000000000000000000000000000000000000000000000000000000"
	hex_byte, _ := hex.DecodeString(raw_data)
	param, _ := msg.DecodeTxParam(hex_byte)
	toContractFromMove := "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000010f8ea2d94b8a7d83ace33bb56731268e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f7a696f6e5f6c6f636b5f70726f78790000000000000000000000000000000000"
	txParamToContractAddr := hex.EncodeToString(param.ToContractAddress)
	log.Info("TestParseRawData", " | txParam: ", txParamToContractAddr)
	assert.Equal(t, toContractFromMove, txParamToContractAddr)
}
